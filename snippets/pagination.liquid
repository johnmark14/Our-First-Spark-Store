<div class="list--inline pagination" id="pagination"></div>
<script>
     var Pagination = {

    code: '',

    // --------------------
    // Utility
    // --------------------

    // converting initialize data
    Extend: function(data) {
        data = data || {};
        Pagination.size = data.size || 300;
        Pagination.page = data.page || 1;
        Pagination.step = data.step || 3;
    },

    // add pages by number (from [s] to [f])
    Add: function(s, f) {
        for (var i = s; i < f; i++) {
            const link = "{%if paginate.previous.is_link%} {{ paginate.previous.url }} {%else%} {{ paginate.next.url }} {% endif %}";
            Pagination.code += `<a href="${link.replace(/page={%if paginate.previous.is_link%}{{paginate.current_page | minus: 1}}{%else%}{{paginate.current_page | plus: 1}}{%endif%}/g, "page="+i)}">` + i + '</a>';
        }
    },

    // add last page with separator
    Last: function() {
        const link = "{%if paginate.previous.is_link%} {{ paginate.previous.url }} {%else%} {{ paginate.next.url }} {% endif %}";
        Pagination.code += `<i>...</i><a href="${link.replace(/page={%if paginate.previous.is_link%}{{paginate.current_page | minus: 1}}{%else%}{{paginate.current_page | plus: 1}}{%endif%}/g, "page="+Pagination.size)}">` + Pagination.size + '</a>';
    },

    // add first page with separator
    First: function() {
        const link = "{%if paginate.previous.is_link%} {{ paginate.previous.url }} {%else%} {{ paginate.next.url }} {% endif %}";
        Pagination.code += `<a href="${link.replace(/page={%if paginate.previous.is_link%}{{paginate.current_page | minus: 1}}{%else%}{{paginate.current_page | plus: 1}}{%endif%}/g, "page=1")}">1</a><i>...</i>`;
    },



    // --------------------
    // Handlers
    // --------------------

    // change page
    // Click: function() {
    //     Pagination.page = +this.innerHTML;
    //     Pagination.Start();
    // },

    // previous page
    // Prev: function() {
    //     Pagination.page--;
    //     if (Pagination.page < 1) {
    //         Pagination.page = 1;
    //     }
    //     Pagination.Start();
    // },

    // next page
    // Next: function() {
    //     Pagination.page++;
    //     if (Pagination.page > Pagination.size) {
    //         Pagination.page = Pagination.size;
    //     }
    //     Pagination.Start();
    // },



    // --------------------
    // Script
    // --------------------

    // binding pages
    Bind: function() {
        var a = Pagination.e.getElementsByTagName('a');
        for (var i = 0; i < a.length; i++) {
            if (+a[i].innerHTML === Pagination.page) a[i].className = 'current';
            if (+a[i].innerHTML === Pagination.page) a[i].href = 'javascript: void(0)';
            a[i].addEventListener('click', Pagination.Click, false);
        }
    },

    // write pagination
    Finish: function() {
        Pagination.e.innerHTML = Pagination.code;
        Pagination.code = '';
        Pagination.Bind();
    },

    // find pagination type
    Start: function() {
        if (Pagination.size < Pagination.step * 2 + 3) {
            Pagination.Add(1, Pagination.size + 1);
        }
        else if (Pagination.page < Pagination.step * 2 + 1) {
            Pagination.Add(1, Pagination.step * 2 + 2);
            Pagination.Last();
        }
        else if (Pagination.page > Pagination.size - Pagination.step * 2) {
            Pagination.First();
            Pagination.Add(Pagination.size - Pagination.step * 2 - 2, Pagination.size + 1);
        }
        else {
            Pagination.First();
            Pagination.Add(Pagination.page - Pagination.step, Pagination.page + Pagination.step + 1);
            Pagination.Last();
        }
        Pagination.Finish();
    },



    // --------------------
    // Initialization
    // --------------------

    // binding buttons
    Buttons: function(e) {
        var nav = e.getElementsByTagName('a');
        nav[0].addEventListener('click', Pagination.Prev, false);
        nav[1].addEventListener('click', Pagination.Next, false);
    },

    // create skeleton
    Create: function(e) {

        var html = [
            `
            {% unless paginate.previous.is_link %}
                <a href="javascript:void(0)">
            {% else %}
                <a href="{{ paginate.previous.url }}">
            {% endunless%}
            {% include 'icon-arrow-left' %}
            </a>`, // previous button
            '<span></span>',  // pagination container
            `
            {% unless paginate.next.is_link %}
                <a href="javascript:void(0)">
            {% else %}
                <a href="{{ paginate.next.url }}">
            {% endunless %}
            {% include 'icon-arrow-right' %}</a>`  // next button
        ];

        e.innerHTML = html.join('');
        Pagination.e = e.getElementsByTagName('span')[0];
        Pagination.Buttons(e);
    },

    // init
    Init: function(e, data) {
        Pagination.Extend(data);
        Pagination.Create(e);
        Pagination.Start();
    }
    };



    /* * * * * * * * * * * * * * * * *
    * Initialization
    * * * * * * * * * * * * * * * * */

    var init = function() {
    Pagination.Init(document.getElementById('pagination'), {
        size: {{paginate.pages}}, // pages size
        page: {{paginate.current_page}},  // selected page
        step: 2   // pages before and after current
    });
    };

    document.addEventListener('DOMContentLoaded', init, false);

</script>